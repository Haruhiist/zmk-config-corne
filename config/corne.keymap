/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>

// dt-formatter: indent = "  "
// dt-formatter: reindentMultilineIntegerCells = "dedent"

/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <0>;
      flavor = "tap-preferred";
      bindings =
        <&kp>,
        <&kp>;
    };
  };

  combos {
    compatible = "zmk,combos";

    tab {
      bindings = <&trans>;
      key-positions = <2 3>;
    };

    ctrl {
      bindings = <&kp LCTRL>;
      key-positions = <26 27>;
    };

    cmd {
      bindings = <&kp LCMD>;
      key-positions = <37 38>;
    };

    alt {
      bindings = <&kp LEFT_ALT>;
      key-positions = <39 40>;
    };

    shift {
      bindings = <&kp LSHIFT>;
      key-positions = <8 9>;
    };

    caps_word {
      bindings = <&caps_word>;
      key-positions = <17 18>;
    };

    delete {
      bindings = <&kp DEL>;
      key-positions = <32 33>;
    };
  };

  macros {
    zed_em_kay: zed_em_kay {
      compatible = "zmk,behavior-macro";
      label = "ZM_zed_em_kay";
      #binding-cells = <0>;
      bindings =
        <&macro_press>,
        <&kp LSHFT>,
        <&macro_tap>,
        <&kp Z &kp M &kp K>,
        <&macro_release>,
        <&kp LSHFT>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base {
      label = " Base Layer";
      bindings = <
 &mt LEFT_GUI ESC   &kp Q   &kp W            &kp E            &kp R        &kp T                &kp Y                  &kp U      &kp I    &kp O     &kp P  &mt RIGHT_GUI LEFT_BRACKET
    &mt LCTRL TAB   &kp A   &kp S            &kp D            &kp F        &kp G                &kp H                  &kp J      &kp K    &kp L  &kp SEMI              &mt RCTRL APOS
     &kp LEFT_ALT   &kp Z   &kp X            &kp C            &kp V        &kp B                &kp N                  &kp M  &kp COMMA  &kp DOT  &kp FSLH           &kp RIGHT_BRACKET
                                   &lt 1 BACKSPACE  &mt LSHFT SPACE  &lt 2 ENTER          &lt 2 ENTER  &mt RIGHT_SHIFT SPACE  &lt 1 DEL
      >;
    };

    nums {
      label = " Nums and Fs";
      bindings = <
        &kp F1        &kp F2      &kp F3      &kp F4      &kp F5       &kp F6               &kp F7      &kp F8      &kp F9     &kp F10     &kp F11        &kp F12
 &kp LS(EQUAL)    &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)   &kp LS(N5)           &kp RS(N6)  &kp RS(N7)  &kp RS(N8)  &kp RS(N9)  &kp RS(N0)  &kp RS(MINUS)
     &kp EQUAL  &kp NUMBER_1      &kp N2      &kp N3      &kp N4       &kp N5               &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &kp MINUS
                                              &trans      &trans  &lt 3 ENTER          &lt 3 ENTER      &trans      &trans
      >;
    };

    navi {
      label = " Nav and KP";
      bindings = <
      &kp GRAVE    &kp KP_DIVIDE  &kp KP_N7        &kp KP_N8  &kp KP_N9  &kp KP_MINUS            &kp K_MUTE  &kp HOME              &kp UP  &kp PG_UP        &kp C_PREV  &kp LG(LS(N4))
         &trans  &kp KP_MULTIPLY  &kp KP_N4        &kp KP_N5  &kp KP_N6   &kp KP_PLUS          &kp C_VOL_UP  &kp LEFT            &kp DOWN  &kp RIGHT  &kp C_PLAY_PAUSE       &kp GRAVE
 &kp KP_NUMLOCK        &kp KP_N0  &kp KP_N1        &kp KP_N2  &kp KP_N3  &kp KP_COMMA          &kp C_VOL_DN   &kp END  &kp LG(LC(LS(N4)))  &kp PG_DN        &kp C_NEXT       &kp TILDE
                                             &lt 3 BACKSPACE     &trans        &trans                &trans    &trans           &lt 3 DEL
      >;
    };

    tiling {
      label = " Tiling and BT";
      bindings = <
 &out OUT_TOG  &trans  &trans  &trans         &trans  &bt BT_SEL 0          &bt BT_SEL 0      &kp LC(LEFT)      &kp LA(LC(ENTER))      &kp LC(RIGHT)  &kp LG(EQUAL)  &out OUT_TOG
       &trans  &trans  &trans  &trans  &kp LG(LC(F))  &bt BT_SEL 1          &bt BT_SEL 1  &kp LC(LA(LEFT))  &kp LC(LA(BACKSPACE))  &kp LA(LC(RIGHT))  &kp LG(MINUS)        &trans
       &trans  &trans  &trans  &trans         &trans    &bt BT_CLR            &bt BT_CLR            &trans          &kp LC(LA(C))             &trans         &trans        &trans
                               &trans         &trans        &trans                &trans            &trans                 &trans
      >;
    };
  };
};
